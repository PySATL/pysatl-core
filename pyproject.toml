[build-system]
build-backend = "poetry.core.masonry.api"

requires = [ "poetry-core>=1.9" ]

[tool.poetry]
name = "pysatl-core"
version = "0.0.1a0"
description = "Computation core for PySATL"
readme = "README.md"
license = "MIT"
authors = [
  "Leonid Elkin <yolkinleonwork@gmail.com>",
  "Mikhail Mikhailov <desiment@yandex.ru>",
]
keywords = [
  "density-functions",
  "distributions",
  "mathematics",
  "numerical-analysis",
  "probability",
  "random-variables",
  "sampling",
  "scientific-computing",
  "statistics",
  "symbolic-computation",
]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Typing :: Typed",
]
packages = [ { include = "pysatl_core", from = "src" } ]
include = [
  { path = "src/pysatl_core/py.typed", format = "wheel" },
  { path = "src/pysatl_core/py.typed", format = "sdist" },
]
homepage = "https://github.com/PySATL/pysatl-core"
repository = "https://github.com/PySATL/pysatl-core"
urls.Issues = "https://github.com/PySATL/pysatl-core/issues"

[tool.poetry.dependencies]
python = ">=3.12"
numpy = "^2.0.0"
scipy = ">=1.13"
matplotlib = "^3.10.6"

[tool.poetry.group.dev.dependencies]
ruff = ">=0.6"
mypy = ">=1.12"
pytest = ">=8"
pytest-cov = ">=5"
coverage = { version = ">=7.5", extras = [ "toml" ] }
pre-commit = ">=3.6"
types-setuptools = "*"

[tool.poetry.group.docs.dependencies]
jupyter = "^1.1.1"

[tool.ruff]
target-version = "py312"
line-length = 100

format.line-ending = "lf"

lint.select = [ "B", "C4", "E", "F", "I", "ISC", "PIE", "SIM", "TID", "UP" ]
lint.ignore = [ "B008", "E203" ]
lint.fixable = [ "ALL" ]
lint.unfixable = [  ]

lint.isort.combine-as-imports = true
lint.isort.force-single-line = false
lint.isort.known-first-party = [ "pysatl_core" ]
lint.isort.order-by-type = true

[tool.pytest.ini_options]
addopts = "-q --cov=pysatl_core --cov-report=term-missing"
testpaths = [ "tests" ]

[tool.coverage.run]
source = [ "pysatl_core" ]
branch = true
parallel = true

[tool.coverage.report]
show_missing = true
skip_covered = false
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
]

[tool.mypy]
python_version = "3.12"
strict = true
warn_unused_configs = true
warn_return_any = true
disallow_untyped_defs = true
disallow_any_generics = true
no_implicit_optional = true
namespace_packages = true
explicit_package_bases = true
mypy_path = [ "src" ]
